{"version":3,"sources":["components/FilterMenu.jsx","components/Habit.jsx","components/Memo.jsx","components/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["FilterMenu","handleFilterMenu","className","onClick","e","target","Habit","habits","useState","length","text","habit","setHabit","habitIndex","setHabitIndex","plusHabitIndex","useEffect","window","setTimeout","timer","clearTimeout","aria-hidden","Memo","filter","memos","deleteMemo","editMemo","class","map","memo","menu","id","createMemoForm","Input","handleInputMenu","handleSubmit","changeInputText","value","type","name","defaultChecked","checked","for","onChange","App","JSON","parse","localStorage","getItem","setMemos","setHabits","filterMenu","setFilterMenu","console","log","deleteID","newMemos","setItem","stringify","setMenu","setText","selectedMenu","innerText","Math","random","toString","substr","db","menuVal","undefined","changeText","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ad6c74b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function FilterMenu({ handleFilterMenu }) {\n\t// const [menu, setMenu] = useState('nav__work');\n\t// function handleClick(selectedMenu) {\n\t// \tsetMenu(selectedMenu);\n\t// }\n\n\t// useEffect(() => {\n\t// \t// * 현재 선택된 menu 확인\n\t// \t// console.log(menu);\n\t// }, [menu]);\n\n\treturn (\n\t\t<nav className=\"menus-container\">\n\t\t\t<ul className=\"menus\" onClick={(e) => handleFilterMenu(e.target.className)}>\n\t\t\t\t<li className=\"all\">All</li>\n\t\t\t\t<li className=\"work\">Work</li>\n\t\t\t\t<li className=\"life\">Life</li>\n\t\t\t\t<li className=\"hobby\">Hobby</li>\n\t\t\t\t<li className=\"wish\">Wish</li>\n\t\t\t\t<li className=\"health\">Health</li>\n\t\t\t\t<li className=\"habit\">Habit</li>\n\t\t\t</ul>\n\t\t</nav>\n\t);\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function Habit({ habits }) {\n\tconst [habit, setHabit] = useState(habits.length === 0 ? '이곳에 습관 텍스트가 나옵니다.' : habits[0].text);\n\tconst [habitIndex, setHabitIndex] = useState(0);\n\n\tuseEffect(() => {\n\t\tif (habitIndex < 0) setHabitIndex(habits.length - 1);\n\t\twindow.setTimeout(() => plusHabitIndex, 1000);\n\n\t\tif (habits.length !== 0) setHabit(habits[habitIndex].text);\n\n\t\t// * react Hooks에서 setInterval처럼 기능하게끔 하기\n\t\tconst timer = setTimeout(() => {\n\t\t\tplusHabitIndex();\n\t\t}, 5000);\n\t\treturn () => clearTimeout(timer);\n\t}, [habitIndex]);\n\n\tfunction minusHabitIndex() {\n\t\thabitIndex === 0 ? setHabitIndex(habits.length - 1) : setHabitIndex(habitIndex - 1);\n\t}\n\n\tfunction plusHabitIndex() {\n\t\tsetHabitIndex((habitIndex + 1) % habits.length);\n\t}\n\n\treturn (\n\t\t<header className=\"habit\">\n\t\t\t<div className=\"habit__div\">\n\t\t\t\t<span className=\"habbit__text\">{habit}</span>\n\t\t\t</div>\n\t\t\t<div className=\"habit__btn__container\">\n\t\t\t\t<button className=\"habit__prev__btn\" onClick={minusHabitIndex}>\n\t\t\t\t\t<i className=\"fa fa-chevron-left\" aria-hidden=\"true\"></i>\n\t\t\t\t</button>\n\t\t\t\t<button className=\"habit__next__btn\" onClick={plusHabitIndex}>\n\t\t\t\t\t<i className=\"fa fa-chevron-right\" aria-hidden=\"true\"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</header>\n\t);\n}\n","import React from 'react';\n\nexport default function Memo({ filter, memos, deleteMemo, editMemo }) {\n\tfunction createMemoForm({ menu, text, id }) {\n\t\treturn (\n\t\t\t<li className=\"memo\">\n\t\t\t\t<div className=\"memo__text\" id={id} onClick={(e) => editMemo(e.target, menu)}>\n\t\t\t\t\t{text}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"memo__info\">\n\t\t\t\t\t<span className=\"memo__menu\" id={id}>\n\t\t\t\t\t\t{menu}\n\t\t\t\t\t</span>\n\t\t\t\t\t<i\n\t\t\t\t\t\tclassName=\"fas fa-trash-alt memo__delete__btn\"\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\tonClick={(e) => deleteMemo(e.target.id)}\n\t\t\t\t\t></i>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t}\n\n\treturn (\n\t\t<main class=\"memos__container\">\n\t\t\t{memos.map((memo) => {\n\t\t\t\tif (memo.menu === filter || filter === 'all') return createMemoForm(memo);\n\t\t\t})}\n\t\t</main>\n\t);\n}\n","import React, { useEffect, useState } from 'react';\n\nexport default function Input({ text, menu, handleInputMenu, handleSubmit, changeInputText }) {\n\treturn (\n\t\t<div className=\"input-container\">\n\t\t\t<div className=\"input__memos__form\">\n\t\t\t\t<div className=\"input__menus\" onClick={(e) => handleInputMenu(e.target.value)}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\tname=\"menu\"\n\t\t\t\t\t\t\tid=\"work\"\n\t\t\t\t\t\t\tvalue=\"work\"\n\t\t\t\t\t\t\tdefaultChecked\n\t\t\t\t\t\t\tchecked={menu === 'work'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label for=\"work\">Work</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"radio\" name=\"menu\" id=\"life\" value=\"life\" checked={menu === 'life'} />\n\t\t\t\t\t\t<label for=\"life\">Life</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"radio\" name=\"menu\" id=\"hobby\" value=\"hobby\" checked={menu === 'hobby'} />\n\t\t\t\t\t\t<label for=\"hobby\">Hobby</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"radio\" name=\"menu\" id=\"wish\" value=\"wish\" checked={menu === 'wish'} />\n\t\t\t\t\t\t<label for=\"wish\">Wish</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"radio\" name=\"menu\" id=\"health\" value=\"health\" checked={menu === 'health'} />\n\t\t\t\t\t\t<label for=\"health\">Health</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"radio\" name=\"menu\" id=\"habit\" value=\"habit\" checked={menu === 'habit'} />\n\t\t\t\t\t\t<label for=\"habit\">Habit</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"input__memo\">\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tclassName=\"input__memo__text\"\n\t\t\t\t\t\tvalue={text}\n\t\t\t\t\t\tonChange={(e) => changeInputText(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"input__memo__submit\">\n\t\t\t\t<button onClick={handleSubmit}>\n\t\t\t\t\t<i className=\"fa fa-paper-plane input__memo__submit__btn\" aria-hidden=\"true\"></i>\n\t\t\t\t</button>\n\t\t\t\t{/* <input type=\"submit\" submit={handleSubmit} className=\"input__memo__submit__btn\"></input> */}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, { useState, useEffect } from 'react';\nimport FilterMenu from './components/FilterMenu.jsx';\nimport Habit from './components/Habit.jsx';\nimport Memo from './components/Memo.jsx';\nimport Input from './components/Input.jsx';\nimport './App.css';\n\nexport default function App() {\n\tconst [memos, setMemos] = useState(JSON.parse(localStorage.getItem('memos') || []));\n\tconst [menus, setMenus] = useState(['Work', 'Life', 'Hobby', 'Wish', 'Health', 'Habit']);\n\tconst [habits, setHabits] = useState(\n\t\tJSON.parse(localStorage.getItem('memos')).filter((memo) => memo.menu === 'habit')\n\t);\n\tconst [filterMenu, setFilterMenu] = useState('all');\n\n\t// ! * componentDidMount\n\tuseEffect(() => {\n\t\tconsole.log('App.js');\n\t\t// setMemos(JSON.parse(localStorage.getItem('memos')));\n\t\t// setHabits(memos.filter((memo) => memo.menu === 'habit'));\n\t}, []);\n\n\t// ! * Habit - habit 추가/삭제되었을 떄 Update\n\tuseEffect(() => {\n\t\tsetHabits(JSON.parse(localStorage.getItem('memos')).filter((memo) => memo.menu === 'habit'));\n\t}, [habits.length]);\n\n\t// ! * Memo\n\t// * memos.length 바뀌면 달리 보여줘야됨\n\t// * 메모 추가되었을 경우\n\tuseEffect(() => {}, [memos.length]);\n\n\t// * deleteMemo\n\tconst deleteMemo = (deleteID) => {\n\t\tconst newMemos = memos.filter((memo) => memo.id !== deleteID);\n\t\tlocalStorage.setItem('memos', JSON.stringify(newMemos));\n\t\tsetMemos(newMemos);\n\t\t// setTodos(prev => [...prev.slice(0, index), ...prev.slice(index + 1)]);\n\t};\n\n\t// * editMemo\n\tconst editMemo = (memo, menu) => {\n\t\tconst text = memo.innerText;\n\t\tconst id = memo.id;\n\n\t\tdeleteMemo(id);\n\t\tsetText(text);\n\t\tsetMenu(menu);\n\t\tconsole.log(`${menu}     ${text}\\t${id}`);\n\t\t// handleInputMenu(menu);\n\t\t// * radio checked 바꿔야함\n\t};\n\n\t// ! Input\n\tconst [menu, setMenu] = useState('work');\n\tconst [text, setText] = useState('');\n\n\tconst createUUID = () => {\n\t\treturn '_' + Math.random().toString(36).substr(2, 9);\n\t};\n\n\tuseEffect(() => {\n\t\t// * input form 에서도 변경되는 모습\n\t}, [text]);\n\n\tconst handleInputMenu = (menuVal) => {\n\t\tif (menuVal !== undefined) {\n\t\t\tsetMenu(menuVal);\n\t\t}\n\t};\n\n\tconst changeInputText = (changeText) => {\n\t\tsetText(changeText);\n\t};\n\n\tuseEffect(() => {}, [menu]);\n\n\tconst handleSubmit = () => {\n\t\tif (text !== '') {\n\t\t\tconst id = createUUID();\n\t\t\tconst db = JSON.parse(localStorage.getItem('memos'));\n\t\t\tlocalStorage.setItem('memos', JSON.stringify([...db, { menu, text, id }]));\n\t\t\tsetText('');\n\t\t\tsetMemos([...memos, { menu, text, id }]);\n\t\t\tsetMenu(menu);\n\t\t\tsetFilterMenu(filterMenu);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconsole.log(`filterMenu: ${filterMenu}`);\n\t}, [filterMenu]);\n\n\tconst handleFilterMenu = (selectedMenu) => {\n\t\tsetFilterMenu(selectedMenu);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"page\">\n\t\t\t\t<Habit habits={habits} />\n\t\t\t\t<FilterMenu handleFilterMenu={handleFilterMenu} />\n\t\t\t\t<Memo filter={filterMenu} memos={memos} deleteMemo={deleteMemo} editMemo={editMemo} />\n\t\t\t\t<Input\n\t\t\t\t\ttext={text}\n\t\t\t\t\tmenu={menu}\n\t\t\t\t\thandleSubmit={handleSubmit}\n\t\t\t\t\thandleInputMenu={handleInputMenu}\n\t\t\t\t\tchangeInputText={changeInputText}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}